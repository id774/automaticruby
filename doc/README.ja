automaticruby

名前
 automaticruby - Ruby による汎用的な自動処理フレームワーク

書式
$ automatic

 任意のレシピを指定して起動する
$ automatic -c <recipe>

 バージョン番号を表示する
$ automatic -v

説明
 このソフトウェアは、プラガブルに機能を拡張可能な Ruby
による汎用自動処理フレームワークである。
 プラグインによってさまざまな情報を収集加工し、任意の
形で出力することができる。


============
インストール
============

[安定版]
$ gem install automatic


[開発版]
$ git clone git://github.com/id774/automaticruby.git

 ruby 1.9 の場合
$ script/bootstrap

 ruby 1.8 の場合
 Gemfile にある必要な gem を手動でインストールする


============
実行してみる
============

 任意のレシピ (後述) を作成する。
$ automatic -c your_recipe.yml

 -c オプション付きで手動実行し、問題がなければ
 cron に登録するなどして自動化する。


 試しに実行するなら config/feed2console.yml
を利用すると良い。
$ automatic -c config/feed2console.yml

 これは、ブログのフィードを単純にコンソール出力するだけの
簡単なレシピである。
 本ソフトウェアの動作確認に使うことができる。


==========
レシピとは
==========

 Automatic Ruby では YAML 形式で書かれた設定ファイル
を解析し、呼び出すプラグインの情報とそれに伴う様々な
情報を読み込む。

 この YAML ファイルをレシピと呼ぶ。

 automatic.rb 起動時に -c オプションの引数にレシピの
ファイル名を指定することができる。オプションが省略
された場合は config/default.yml が呼ばれる。

[起動例]
$ automatic -c ~/recipes/your_recipe.yml


================
レシピの記述方法
================

 レシピには暗黙的な命名規則がある。

[書式]

plugins:
  - module: プラグイン名
    config:
      変数


 以下はレシピのサンプルとなる YAML ファイルである。

plugins:
  - module: SubscriptionFeed
    config:
      feeds:
        - http://reretlet.tumblr.com/rss

  - module: StorePermalink
    config:
      db: tumblr.db

  - module: FilterImage

  - module: FilterTumblrResize

  - module: StoreTargetLink
    config:
      path: /Users/yourname/Desktop/
      interval: 1

このサンプルレシピの例では
1. Subscription Feed で Tumblr のフィードを購読し
2. StorePermalink でパーマリンクをデータベースに保存し
3  FilterImage と FilterTumblrResize で画像の URL を指定して
4. StoreTargetLink で Tumblr の画像をダウンロードする
という一連の処理をプラグインの組み合わせで実現している。


以下に別の例を示す。

plugins:
  - module: SubscriptionFeed
    config:
      feeds:
        - http://example.com/rss2
        - http://hogefuga.com/feed

  - module: FilterIgnore
    config:
      link:
        - hoge
        - fuga

  - module: StorePermalink
    config:
      db: permalink.db

  - module: PublishHatenaBookmark
    config:
      username: your_hatena_id
      password: your_password
      interval: 5

このサンプルレシピの例では
1. Subscription Feed でフィードを購読し
2. FilterIgnore で無視キーワードを含む URL を除外し
3. StorePermalink でパーマリンクをデータベースに保存し
4. PublishHatenaBookmark ではてなブックマークをする
という一連の処理をプラグインの組み合わせで実現している。


このように、プラグインと設定情報をレシピに記述するだけで
複数のプラグインの組み合わせ次第で無限の可能性を実現する
ことができる。


==========
プラグイン
==========

プラグインは後述する plugins ディレクトリにあるものが読み込まれる。

~/.automatic/plugins が存在する場合、それらも同様に読み込まれる。

自作したプラグインはホームディレクトリに置くと良い。
(プラグインの作り方は後述する)

以下のコマンドで自作したプラグインのためのサブディレクトリを自動生成できる。
$ automatic-config scaffold
(automatic-config の説明は後述する)


==========================
ディレクトリとファイル構成
==========================
.
|
+- bin
|   |
|   +- automatic
|   |    実行ファイル本体
|   |
|   +- automatic-config
|        利用を補助するためのツール
|
+- config
|   |
|   +- default.yml
|        デフォルトでロードされるレシピ
|        YAML 形式でプラグインの情報を記述する
|        automatic.rb の -c オプションの引数で
|        任意のファイル名をレシピとして指定できる
|
|   新しくレシピを書いた場合は config ディレクトリに置く
|
|
+- plugins
|   |
|   +- subscription
|   |    フィードを購読するプラグイン
|   |
|   +- customfeed
|   |    カスタムフィードを生成するプラグイン
|   |
|   +- filter
|   |    情報をフィルタリングするプラグイン
|   |
|   +- store
|   |    情報を内部に保存するプラグイン
|   |
|   +- notify
|   |    情報を通知するプラグイン
|   |
|   +- publish
|        外部に情報を送信するプラグイン
|
|   プラグインを開発した場合は plugins ディレクトリに置く
|
|
+- lib
|   |
|   +- automatic.rb
|   |    Automatic モジュールの定義をする
|   |
|   +- automatic
|   |   |
|   |   +- environment.rb
|   |   |    環境情報を読み込む
|   |   |
|   |   +- pipeline.rb
|   |   |    パイプラインと呼ばれるオブジェクトを利用し
|   |   |    レシピに書かれたプラグインに処理を順次受け渡す
|   |   |
|   |   +- feed_parser.rb
|   |   |    フィードを解析する
|   |   |
|   |   +- log.rb
|   |   |    ログを出力する
|   |   |
|   |   +- recipe.rb
|   |        レシピを読み込む
|   |
|   +- config
|
+- db
|   |
|   +- permalink.db
|        Store::Permalink プラグインで収集された
|        ブックマークが保存される
|
+- script
|   |
|   +- bootstrap
|        bundle install 等の環境設定をおこなう
|        (ruby 1.9 以上のみ)
|
+- utils
|    補助的なツールのためのディレクトリ
|
+- spec
|    ユニットテスト用ディレクトリ
|
+- test
|   |
|   +- integration
|        インテグレーションテスト用ディレクトリ
|
+- vendor
|   |
|   +- gems
|        bundle install された gem パッケージ
|
+- doc
    |
    +- COPYING
    |    本ソフトウェアのライセンス
    |
    +- PLUGINS.ja
    |    プラグインについてのドキュメント
    |
    +- README.ja
         本ドキュメント



==============
開発に参加する
==============

リポジトリ
https://github.com/id774/automaticruby

課題
https://github.com/id774/automaticruby/issues

RubyForge
http://rubyforge.org/projects/automatic/

CI
http://id774.net/jenkins/


プラグインを新しく作ったり、あるいはフレームワークを
改善してくれるなら、以下の手順で開発に参加できる。

1. GitHub でリポジトリをフォークする。
2. プラグインを新しく作ったりする。
3. Pull Request を送信する。

なんらかの貢献があった場合、少しの修正を迅速におこなうために
コミット権を配布する。


================
コーディング規約
================

2 タブ (ソフトタブ)
末尾のスペースは除去
名前空間は既存のコードを参照
{} は do end より推奨される
RDoc ヘッダはファイルの作者によって書かれる
RSPec でテストを書く
カバレッジ 100% を目指す


==================
プラグインの作り方
==================

 たとえば自動処理した何らかの情報を Twitter に投稿したい。

 このようなときは Publish::Twitter プラグインを作れば良い。

 実装方法については後述するが、基本的には Twitter の API に
投稿するだけの簡単な Ruby スクリプトを作るだけである。

 レシピはこのようになるだろう。

  - module: PublishTwitter
    config:
      username: your_mail_address
      password: your_password

 この場合、ファイルを plugins/publish 配下に置き、クラス名
はレシピで指定した PublishTwitter とする。あとは後述する
Automatic::Pipeline の機能により自動的に処理される。


========================
Automatic::Pipeline とは
========================

 本フレームワークはレシピを YAML で解析し、プラグインを
順次読み込む。このとき pipeline がインスタンス生成時の
引数として渡され、戻り値は pipeline に戻る。

 コードは以下の通りである。

 pipeline = []
 recipe.each_plugin { |plugin|
   load_plugin(plugin.module)
   klass = Automatic::Plugin.const_get(plugin.module)
   pipeline = klass.new(plugin.config, pipeline).run
 }

 プラグイン間での連続した pipeline の受け渡しにより
処理要素を直列に連結し、あるプラグインの出力が次の
プラグインの入力となるパイプライン処理を実現する。

 この機構を本フレームワークでは Automatic::Pipeline と呼ぶ。


====================
プラグインの実装規約
====================

 プラグインのコンストラクタは YAML.load によってロード
されたハッシュの配列、及びパイプラインと呼ばれる
インスタンス変数のオブジェクトを引数に取る。

 推奨されるコンストラクタの実装例は以下の通りである。

def initialize(config, pipeline=[])
  @config = config
  @pipeline = pipeline
end

 インスタンスメソッド run が自動的に呼ばれる。
 戻り値はインスタンス変数 @pipeline に渡り、レシピで
定義された次のプラグインに引き渡される。


==============
ユニットテスト
==============

 ユニットテストは RSpec でおこなう。

 プラグインのテストは、引数となるパイプラインを渡し
戻り値を検査する。


========================
継続的インテグレーション
========================

 CI は Jenkins でおこなう。
 http://id774.net/jenkins/


========
結合試験
========

 test/integration 配下に複数のレシピを結合して
テストをおこなうためのレシピを置く。



================
プラグインの説明
================

doc/PLUGINS.ja を参照



================
automatic-config
================

automatic-config は補助的なツールである。

[書式]
$ automatic-config
 サブコマンドの一覧を表示する

$ automatic-config scaffold
 ホームディレクトリに ~/.automatic ディレクトリを生成する。

$ automatic-config autodiscovery <url>
 対象の URL をオートディスカバリで探知しフィードの URL を返す。
(例)
$ automatic-config autodiscovery http://id774.net/blog
["http://id774.net/blog/feed/", "http://id774.net/blog/comments/feed/"]

$ automatic-config opmlparser <opml path>
 OPML ファイルを解析し URL を出力する。
(例)
$ automatic-config opmlparser opml.xml > feeds.txt

$ automatic-config feedparser <url>
 フィードを解析して内容を返す。

$ automatic-config log <level> <message>
 Automatic Ruby のログ形式でメッセージを出力する。



========
更新履歴
========

doc/ChangeLog を参照


====
TODO
====

 GitHub の issues を参照
 https://github.com/id774/automaticruby/issues


========
動作環境
========

Ruby 1.8 以降


以下の gem パッケージに依存

sqlite3
activesupport
hashie
activerecord
gcalapi
xml-simple

詳細は Gemfile を参照


========
注意事項
========

過剰なスクレイピング等を避け、常識の範囲の利用に留める。
本ソフトウェアは GPLv3 ライセンスである。


